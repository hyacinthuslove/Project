?colnames
colnames(my_data)<-cnames
my_data
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags,class,simplify=TRUE, USE.NAMES = TRUE)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
View(flag_colors)
View(flag_colors)
head(flag_colors)
lappy(flags$flag_colors,sum)
lapply(flags$flag_colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <-flags[,19:23]
lappy(flag_shapes,range)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lappy(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
unique_vals <- sapply(flags,unique)
sapply(unique_vals,length())
sapply(unique_vals,length
)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10,replace = FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=1)
rnorm(10,mean=100,sd=25)
?rpois()
rpois(5,lambda=10)
my_pois = replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1<- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
t2==POSIXlt
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
quarters(t3)
t3<- "October 17, 1986 08:24"
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(System.time(),t1,units='days')
difftime(Sys.time(),t1,units='days')
q()
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
heisenberg <- read.csv(file=c(directory,id,".csv"),head=TRUE,sep=",")
heisenberg
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
#heisenberg <- read.csv(file=c(directory,id,".csv"),head=TRUE,sep=",")
#heisenberg
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean("specdata", "nitrate", 23)
c(directory,id,".csv")
c("specdata","nitrate",".csv")
i <- 1
j <- 1
for (f in 1:length(fileList)){
fileName <- fileList[f]
X <-read.xls(fileName)
if(grepl("Drug_Rep", fileName)) {
print("DRUG")
print(fileName)
assign(paste("X_Drug_Rep", i, sep = '_'), X)
i <- i+1
} else {
print("CONTROL")
print(fileName)
assign(paste("X_CONTROL", i, sep = '_'), X)
j <- j+1
}
}
swirl()
swirl
library(swirl)
swirl()
0
q()
q()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
rm(list=ls())
library(swirl)
install_from_swirl("Getting and Cleaning Data")
args(sd)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
?tbl_df
cran
?manip
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package, ip_id)
arrange(cran2,asc(country),desc(r_version),asc(ip-id))
?arrange
?desc
?asc
??asc
arrange(cran2,country,desc(r_version),ip-id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran, ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2 ^10)
mutate(cran3,correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by()
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
?n
?n_distinct
?n
summarize(cran)
summarize(by_package)
?summarize
args(summarize)
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
summarize(by_package,count = n())
summarize(by_package,count = n(),unique = n_distinct(ip_id),countries = n_distinct(country),avg_bytes = mean(size))
submit()
submit()
tbl
tbl(pack_sum)
packsum
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum,count>679)
top_counts
head(top_counts,20)
arrange(top_counts,desc(count))
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum,unique>465)
top_unique
arrange(desc(top_unique))
arrange(top_unique, desc(unique))
submit()
submit()
?chain
submit()
cran %>%
select(ip_id,country,package,size) %>%
print
submit()
submit()
submit()
submit()
arrange(desc(size_mb))
arrange(desc(size_mb))
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
# Your call to arrange() goes here
arrange(desc(size_mb))
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,key=sex_class,value=count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res,sex_class,into = c("sex","class"))
submit()
submit()
students3
students3
submit()
submit()
?spread
submit()
students3
students3
submit()
reset()
gather(student3,class, grade, class1:class5, na.rm = TRUE)
gather(students3,class, grade, class1:class5, na.rm = TRUE)
submit()
submit()
submit()
submit()
args(spread)
args(separate)
submit()
gather(students3,class, grade, class1:class5, na.rm = TRUE)
submit()
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df %>% spread(x, y) %>% gather(x, y, a:b, na.rm = TRUE)
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df
spread(df, x, y)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,midterm,final) ) %>%
print
spread(test,midterm,final) %>%
print
submit()
reset()
reset()
submit()
spread(test,c("midterm","final") %>%
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
submit()
submit()
?mutate
submit()
reset()
?extract_numeric
submit()
gather(students3,class, grade, class1:class5, na.rm = TRUE)
x <- gather(students3,class, grade, class1:class5, na.rm = TRUE)
spread(x,test,grade)
mutate(spread(x,test,grade),class=extract_numeric(class))
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,grade) %>%
mutate(class=extract_numeric(class))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,grade) %>%
mutate(class=extract_numeric(class))
submit()
students4
submit()
submit()
submit()
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
unique
student_info
student_info
submit()
submit()
submit()
submit()
submit()
?unique
reset()
submit()
submit()
passed
failed
passed < -mutate(passed,status="passed")
passed <-mutate(passed,status="passed")
failed <-mutate(failed,status="failed")
?rbind_list
rbind_list(passed,failed)
sat
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day <- today()
this_day
year(today())
month(this_day())
month(this_day
)
wdat(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment = now()
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12,1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(now())
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc<-now(tzone = "America/New_York")
nyc
nyc + days(2)
depart <- nyc + days()
depart <- nyc + days(2)
depart
depart <- update(depart,hours=17,minutes=34)
depart
arrive <- depart + update(depart,hours=15,minutes=50) + days(2)
arrive <- depart + update(depart+days(2),hours=15,minutes=50)
arrive <- depart + update(depart,hours=15,minutes=50)
arrive <- update(depart+days(2),hours=15,minutes=50)
arrive <- depart+days(2)+hours=15+minutes=50
arrive <- depart+hours=15+minutes=50
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
?lubridate
last_time <- mdy("June 17, 2008", "Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
rm(ls)
ls
Q
datasets
?browser
set.seed(1);rpois(5, 2)
set.seed(10); x <- rbinom(10, 10, 0.5); e <- rnorm(10, 0, 20); y <- 0.5 + 2 * x + e
y
x
e
?rnorm
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
system.time()
system.time(now())
now()
mean(x)
ls
undebug(ls)
?undebug
isdebugged(ls)
ls
?browse
?browser
c
ls
str(ls)
setwd("C:/Coursera/Data Analysis and Statistical Inference/Project")
